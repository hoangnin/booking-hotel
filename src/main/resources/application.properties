spring.application.name=hotel
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:hotel}
spring.datasource.username=${POSTGRES_USER:postgres}
spring.datasource.password=${POSTGRES_PASSWORD:postgres}

# Hibernate Configuration
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
# JWT Configuration (production)
#jwt.secret=SIVtq3+6k+JVE0msrImmOGkxqFnG3xqsB8RT5gx3NoqNAueD/2GvN8hxQkgD2EJ+xvrzKBzQZn5YuzW15igDhQ==
#jwt.expiration=300000

# JWT configuration for test
hotel.jwt.secret=SIVtq3+6k+JVE0msrImmOGkxqFnG3xqsB8RT5gx3NoqNAueD/2GvN8hxQkgD2EJ+xvrzKBzQZn5YuzW15igDhQ==
hotel.jwt.expiration=600000
hotel.jwt.refreshToken=3600000

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=gillkaijame@gmail.com
spring.mail.password=ptksepmbvkqqsltq
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

hotel.frontEnd.host=http://localhost:5173
hotel.frontEnd.forgotPasswordPath=forgotPassword
hotel.frontEnd.activeAccount=activeAccount

#for google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-name=Google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

